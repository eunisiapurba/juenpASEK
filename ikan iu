package org.example;

public class Main {
    public static void main(String[] args) {
        Storage arr = new ArrayListStorage();
        Storage hm = new HashMapStorage();

        // testing arrayListStorage
        testing(arr);
        // testing hashMapStorage
        testing(hm);
    }

    public static void testing(Storage storage) {
        Mahasiswa mhs = new Mahasiswa("Gian", "71210689", "Informatika");
        Mahasiswa mhs2 = new Mahasiswa("Yandex", "71210683", "Informatika");
        RegistorMahasiswa rm = new RegistorMahasiswa(storage);
        System.out.println("=== TES INSERT dan DUPLIKASI ===");
        rm.registerMahasiswaBaru(mhs);
        rm.registerMahasiswaBaru(mhs2);
        rm.registerMahasiswaBaru(mhs2);
        System.out.println("");
        rm.printInformasiMahasiswa(mhs.getNim());
        System.out.println();
        rm.printInformasiMahasiswa(mhs2.getNim());

        System.out.println();
        System.out.println("=== TES UPDATE ===");
        rm.updateMahasiswa("71210683", "Yandi", "Informatika");
        rm.updateMahasiswa("71210690", "Yandi", "Informatika");
        System.out.println("");
        rm.printInformasiMahasiswa(mhs.getNim());
        System.out.println();
        rm.printInformasiMahasiswa(mhs2.getNim());

        System.out.println();
        System.out.println("=== TES DELETE ===");
        rm.deleteMahasiswa("71210683");
        rm.printInformasiMahasiswa("71210683");
    }
}
package org.example;

public interface Storage {
    void insertMahasiswa(Mahasiswa mhs);
    Mahasiswa getMahasiswa(String nim);
    void updateMahasiswa(String nim, Mahasiswa mhs);
    void deleteMahasiswa(String nim);
}
package org.example;

public class RegistorMahasiswa {
    private Storage storage;

    public RegistorMahasiswa(Storage storage) {
        this.storage = storage;
    }

    public void registerMahasiswaBaru(Mahasiswa newMhs) {
        storage.insertMahasiswa(newMhs);
    }

    public void printInformasiMahasiswa(String nim) {
        Mahasiswa mhs = storage.getMahasiswa(nim);
        if (mhs != null) {
            System.out.println("NIM\t: " + mhs.getNim());
            System.out.println("Nama\t: " + mhs.getNama());
            System.out.println("Prodi\t: " + mhs.getProdi());
        } else {
            System.out.println("Mahasiswa dengan NIM " + nim + " tidak ditemukan");
        }
    }

    public void updateMahasiswa(String nim, String name, String prodi) {
        Mahasiswa mhs = storage.getMahasiswa(nim);
        if (mhs != null) {
            mhs.setNama(name);
            mhs.setProdi(prodi);
            storage.updateMahasiswa(nim, mhs);
        } else {
            System.out.println("Mahasiswa dengan NIM " + nim + " tidak ditemukan");
        }
    }

    public void deleteMahasiswa(String nim) {
        storage.deleteMahasiswa(nim);
    }
}
package org.example;

import java.util.HashMap;

public class HashMapStorage implements Storage { // Perbaikan: Nama class yang benar adalah HashMapStorage
    private HashMap<String, Mahasiswa> container = new HashMap<>();

    @Override
    public void insertMahasiswa(Mahasiswa mhs) {
        if (container.containsKey(mhs.getNim())) {
            System.out.println("Gagal Insert! NIM " + mhs.getNim() + " sudah ada!");
        } else {
            container.put(mhs.getNim(), mhs);
            System.out.println("Berhasil mendaftarkan mahasiswa: " + mhs.getNim() + " " + mhs.getNama());
        }
    }

    @Override
    public Mahasiswa getMahasiswa(String nim) {
        return container.get(nim);
    }

    @Override
    public void updateMahasiswa(String nim, Mahasiswa mhs) {
        if (container.containsKey(nim)) {
            container.put(nim, mhs);
            System.out.println("Berhasil update Mahasiswa: " + mhs.getNim() + " " + mhs.getNama());
        } else {
            System.out.println("Mahasiswa dengan NIM " + nim + " tidak ditemukan");
        }
    }

    @Override
    public void deleteMahasiswa(String nim) {
        if (container.containsKey(nim)) {
            Mahasiswa deletedMhs = container.remove(nim);
            System.out.println("Berhasil Hapus Mahasiswa: " + deletedMhs.getNim() + " " + deletedMhs.getNama());
        } else {
            System.out.println("Mahasiswa dengan NIM " + nim + " tidak ditemukan");
        }
    }
}
package org.example;

import java.util.ArrayList;

public class ArrayListStorage implements Storage {
    private ArrayList<Mahasiswa> container = new ArrayList<>();

    @Override
    public void insertMahasiswa(Mahasiswa mhs) {
        for (Mahasiswa existingMhs : container) {
            if (existingMhs.getNim().equals(mhs.getNim())) {
                System.out.println("Gagal Insert! NIM " + mhs.getNim() + " sudah ada!");
                return;
            }
        }
        container.add(mhs);
        System.out.println("Berhasil mendaftarkan mahasiswa: " + mhs.getNim() + " " + mhs.getNama());
    }

    @Override
    public Mahasiswa getMahasiswa(String nim) {
        for (Mahasiswa mhs : container) {
            if (mhs.getNim().equals(nim)) {
                return mhs;
            }
        }
        return null;
    }

    @Override
    public void updateMahasiswa(String nim, Mahasiswa mhs) {
        for (int i = 0; i < container.size(); i++) {
            if (container.get(i).getNim().equals(nim)) {
                container.set(i, mhs);
                System.out.println("Berhasil update Mahasiswa: " + mhs.getNim() + " " + mhs.getNama());
                return;
            }
        }
        System.out.println("Mahasiswa dengan NIM " + nim + " tidak ditemukan");
    }

    @Override
    public void deleteMahasiswa(String nim) {
        for (int i = 0; i < container.size(); i++) {
            if (container.get(i).getNim().equals(nim)) {
                Mahasiswa deletedMhs = container.remove(i);
                System.out.println("Berhasil Hapus Mahasiswa: " + deletedMhs.getNim() + " " + deletedMhs.getNama());
                return;
            }
        }
        System.out.println("Mahasiswa dengan NIM " + nim + " tidak ditemukan");
    }
}
