package org.week11;

import javafx.application.Platform;
import javafx.beans.binding.Bindings;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.chart.PieChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

import java.net.URL;
import java.sql.*;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class DaftarCatatanController implements Initializable {
    @FXML
    private TextField txtFldJudul;
    @FXML
    private TextArea txtAreaKonten;
    @FXML
    private TextField txtSearch;
    @FXML
    private TableView<Catatan> table;
    @FXML
    private TableColumn<Catatan, String> id;
    @FXML
    private TableColumn<Catatan, String> judul;
    @FXML
    private TableColumn<Catatan, String> kategori;
    @FXML
    private ChoiceBox<String> cbKategori;
    @FXML
    private PieChart pieChart;

    private ObservableList<Catatan> catatanObservableList;
    private FilteredList<Catatan> filteredList;
    private final String DB_URL = "jdbc:sqlite:catatanku.db";

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        catatanObservableList = FXCollections.observableArrayList();
        loadCatatanFromDB();

        filteredList = new FilteredList<>(catatanObservableList, b -> true);

        table.setItems(filteredList);
        id.setCellValueFactory(new PropertyValueFactory<>("id"));
        judul.setCellValueFactory(new PropertyValueFactory<>("judul"));
        kategori.setCellValueFactory(new PropertyValueFactory<>("kategori"));

        cbKategori.setItems(FXCollections.observableArrayList("Pribadi", "Pekerjaan", "Lainnya"));

        txtSearch.textProperty().addListener((observable, oldValue, newValue) -> {
            filteredList.setPredicate(catatan -> {
                if (newValue == null || newValue.isEmpty()) return true;
                String lowerCaseFilter = newValue.toLowerCase();
                return catatan.getJudul().toLowerCase().contains(lowerCaseFilter)
                        || catatan.getKategori().toLowerCase().contains(lowerCaseFilter)
                        || catatan.getId().toLowerCase().contains(lowerCaseFilter);
            });
        });
    }

    private void loadCatatanFromDB() {
        try (Connection connection = DriverManager.getConnection(DB_URL);
             Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM catatan")) {

            while (rs.next()) {
                Catatan c = new Catatan(
                        rs.getString("id"),
                        rs.getString("judul"),
                        rs.getString("kategori"),
                        rs.getString("konten")
                );
                catatanObservableList.add(c);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void onTampilkanGrafikClick(ActionEvent event) {
        Map<String, Long> countMap = catatanObservableList.stream()
                .collect(Collectors.groupingBy(Catatan::getKategori, Collectors.counting()));

        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();
        countMap.forEach((kategori, count) -> pieChartData.add(new PieChart.Data(kategori, count)));

        pieChart.setData(pieChartData);
    }

    @FXML
    private void onKeluarClick(ActionEvent event) {
        Platform.exit();
    }
}
